using MediatekNaiveProtocol.Mediatek.API;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using static SharpMTKClient.Class.Protocol.MTK_FlashTool;

namespace SharpMTKClient.Class.Protocol
{
    public class MTK_DL
    {
        public struct ScatterItem
        {
            public string partition_index;
            public string partition_name;
            public string file_name;
            public string is_download;
            public string type;
            public string linear_start_addr;
            public string physical_start_addr;
            public string partition_size;
            public string region;
            public string storage;
            public string boundary_check;
            public string is_reserved;
            public string operation_type;
            public string reserve;
        }

        public struct ScatterStruct
        {
            public string config_version;
            public string platform;
            public string project;
            public string storage;
            public string boot_channel;
            public string block_size;
            public List<MTK_DL.ScatterItem> items;
        }

        public enum STATUS_E : uint
        {
            S_DONE = 0U,
            STATUS_OK = S_DONE,
            // private random error code (1~999) 
            // common error code (1000~1999) 
            S_COMMON_ERROR_BEGIN = 1000U,
            S_STOP = S_COMMON_ERROR_BEGIN,
            S_UNDEFINED_ERROR,
            S_INVALID_ARGUMENTS,
            S_INVALID_BBCHIP_TYPE,
            S_INVALID_EXT_CLOCK,
            S_INVALID_BMTSIZE,
            S_GET_DLL_VER_FAIL,
            S_INVALID_BUF,
            S_BUF_IS_NULL,
            S_BUF_LEN_IS_ZERO,
            S_BUF_SIZE_TOO_SMALL,
            S_NOT_ENOUGH_STORAGE_SPACE,
            S_NOT_ENOUGH_MEMORY,
            S_COM_PORT_OPEN_FAIL,
            S_COM_PORT_SET_TIMEOUT_FAIL,
            S_COM_PORT_SET_STATE_FAIL,
            S_COM_PORT_PURGE_FAIL,
            S_FILEPATH_NOT_SPECIFIED_YET,
            S_UNKNOWN_TARGET_BBCHIP,
            S_SKIP_BBCHIP_HW_VER_CHECK,
            S_UNSUPPORTED_VER_OF_BOOT_ROM,
            S_UNSUPPORTED_VER_OF_BOOTLOADER,
            S_UNSUPPORTED_VER_OF_DA,
            S_UNSUPPORTED_VER_OF_SEC_INFO,
            S_UNSUPPORTED_VER_OF_ROM_INFO,
            S_SEC_INFO_NOT_FOUND,
            S_ROM_INFO_NOT_FOUND,
            S_CUST_PARA_NOT_SUPPORTED,
            S_CUST_PARA_WRITE_LEN_INCONSISTENT,
            S_SEC_RO_NOT_SUPPORTED,
            S_SEC_RO_WRITE_LEN_INCONSISTENT,
            S_ADDR_N_LEN_NOT_32BITS_ALIGNMENT,
            S_UART_CHKSUM_ERROR,
            S_EMMC_FLASH_BOOT,
            S_NOR_FLASH_BOOT,
            S_NAND_FLASH_BOOT,
            S_UNSUPPORTED_VER_OF_EMI_INFO,
            S_PART_NO_VALID_TABLE,
            S_PART_NO_SPACE_FOUND,
            // SV5 ANDROID { 
            S_UNSUPPORTED_VER_OF_SEC_CFG,
            // SV5 ANDROID } 
            S_UNSUPPORTED_OPERATION,
            S_CHKSUM_ERROR,
            S_TIMEOUT,
            S_COMMON_ERROR_END, // END
            // BOOT ROM error code (2000~2999) 
            S_BROM_ERROR_BEGIN = 2000U,
            S_BROM_SET_META_REG_FAIL = S_BROM_ERROR_BEGIN,
            S_BROM_SET_FLASHTOOL_REG_FAIL,
            S_BROM_SET_REMAP_REG_FAIL,
            S_BROM_SET_EMI_FAIL,
            S_BROM_DOWNLOAD_DA_FAIL,
            S_BROM_CMD_STARTCMD_FAIL,
            S_BROM_CMD_STARTCMD_TIMEOUT,
            S_BROM_CMD_JUMP_FAIL,
            S_BROM_CMD_WRITE16_MEM_FAIL,
            S_BROM_CMD_READ16_MEM_FAIL,
            S_BROM_CMD_WRITE16_REG_FAIL,
            S_BROM_CMD_READ16_REG_FAIL,
            S_BROM_CMD_CHKSUM16_MEM_FAIL,
            S_BROM_CMD_WRITE32_MEM_FAIL,
            S_BROM_CMD_READ32_MEM_FAIL,
            S_BROM_CMD_WRITE32_REG_FAIL,
            S_BROM_CMD_READ32_REG_FAIL,
            S_BROM_CMD_CHKSUM32_MEM_FAIL,
            S_BROM_JUMP_TO_META_MODE_FAIL,
            S_BROM_WR16_RD16_MEM_RESULT_DIFF,
            S_BROM_CHKSUM16_MEM_RESULT_DIFF,
            S_BROM_BBCHIP_HW_VER_INCORRECT,
            S_BROM_FAIL_TO_GET_BBCHIP_HW_VER,
            S_BROM_AUTOBAUD_FAIL,
            S_BROM_SPEEDUP_BAUDRATE_FAIL,
            S_BROM_LOCK_POWERKEY_FAIL,
            S_BROM_WM_APP_MSG_OUT_OF_RANGE,
            S_BROM_NOT_SUPPORT_MT6205B,
            S_BROM_EXCEED_MAX_DATA_BLOCKS,
            S_BROM_EXTERNAL_SRAM_DETECTION_FAIL,
            S_BROM_EXTERNAL_DRAM_DETECTION_FAIL,
            S_BROM_GET_FW_VER_FAIL,
            S_BROM_CONNECT_TO_BOOTLOADER_FAIL,
            // SV5 - MT6276
            S_BROM_CMD_SEND_DA_FAIL,
            S_BROM_CMD_SEND_DA_CHKSUM_DIFF,
            S_BROM_CMD_JUMP_DA_FAIL,
            S_BROM_CMD_JUMP_BL_FAIL,
            // ...
            S_BROM_EFUSE_REG_NO_MATCH_WITH_TARGET,
            S_BROM_EFUSE_WRITE_TIMEOUT,
            S_BROM_EFUSE_DATA_PROCESS_ERROR,
            S_BROM_EFUSE_BLOW_ERROR,
            S_BROM_EFUSE_ALREADY_BROKEN,
            S_BROM_EFUSE_BLOW_PARTIAL,
            S_BROM_SEC_VER_FAIL,
            S_BROM_PL_SEC_VER_FAIL,
            S_BROM_SET_WATCHDOG_FAIL,
            S_BROM_EFUSE_VALUE_IS_NOT_ZERO,
            S_BROM_EFUSE_WRITE_TIMEOUT_WITHOUT_EFUSE_VERIFY,
            S_BROM_EFUSE_UNKNOW_EXCEPTION_WITHOUT_EFUSE_VERIFY,
            S_BROM_ERROR_END, // END
            // DA error code (3000~3999) 
            S_DA_ERROR_BEGIN = 3000U,
            S_DA_INT_RAM_ERROR = S_DA_ERROR_BEGIN,
            S_DA_EXT_RAM_ERROR,
            S_DA_SETUP_DRAM_FAIL,
            S_DA_SETUP_PLL_ERR,
            S_DA_SETUP_EMI_PLL_ERR,
            S_DA_DRAM_ABNORMAL_TYPE_SETTING,
            S_DA_DRAMC_RANK0_CALIBRATION_FAILED,
            S_DA_DRAMC_RANK1_CALIBRATION_FAILED,
            S_DA_DRAM_NOT_SUPPORT,
            S_DA_RAM_FLOARTING,
            S_DA_RAM_UNACCESSABLE,
            S_DA_RAM_ERROR,
            S_DA_DEVICE_NOT_FOUND,
            S_DA_NOR_UNSUPPORTED_DEV_ID,
            S_DA_NAND_UNSUPPORTED_DEV_ID,
            S_DA_NOR_FLASH_NOT_FOUND,
            S_DA_NAND_FLASH_NOT_FOUND,
            S_DA_SOC_CHECK_FAIL,
            S_DA_NOR_PROGRAM_FAILED,
            S_DA_NOR_ERASE_FAILED,
            S_DA_NAND_PAGE_PROGRAM_FAILED,
            S_DA_NAND_SPARE_PROGRAM_FAILED,
            S_DA_NAND_HW_COPYBACK_FAILED,
            S_DA_NAND_ERASE_FAILED,
            S_DA_TIMEOUT,
            S_DA_IN_PROGRESS,
            S_DA_SUPERAND_ONLY_SUPPORT_PAGE_READ,
            S_DA_SUPERAND_PAGE_PRGRAM_NOT_SUPPORT,
            S_DA_SUPERAND_SPARE_PRGRAM_NOT_SUPPORT,
            S_DA_SUPERAND_COPYBACK_NOT_SUPPORT,
            S_DA_NOR_CMD_SEQUENCE_ERR,
            S_DA_NOR_BLOCK_IS_LOCKED,
            S_DA_NAND_BLOCK_IS_LOCKED,
            S_DA_NAND_BLOCK_DATA_UNSTABLE,
            S_DA_NOR_BLOCK_DATA_UNSTABLE,
            S_DA_NOR_VPP_RANGE_ERR,
            S_DA_INVALID_BEGIN_ADDR,
            S_DA_NOR_INVALID_ERASE_BEGIN_ADDR,
            S_DA_NOR_INVALID_READ_BEGIN_ADDR,
            S_DA_NOR_INVALID_PROGRAM_BEGIN_ADDR,
            S_DA_INVALID_RANGE,
            S_DA_NOR_PROGRAM_AT_ODD_ADDR,
            S_DA_NOR_PROGRAM_WITH_ODD_LENGTH,
            S_DA_NOR_BUFPGM_NO_SUPPORT,
            S_DA_NAND_UNKNOWN_ERR,
            S_DA_NAND_BAD_BLOCK,
            S_DA_NAND_ECC_1BIT_CORRECT,
            S_DA_NAND_ECC_2BITS_ERR,
            S_DA_NAND_SPARE_CHKSUM_ERR,
            S_DA_NAND_HW_COPYBACK_DATA_INCONSISTENT,
            S_DA_NAND_INVALID_PAGE_INDEX,
            S_DA_NFI_NOT_SUPPORT,
            S_DA_NFI_CS1_NOT_SUPPORT,
            S_DA_NFI_16BITS_IO_NOT_SUPPORT,
            S_DA_NFB_BOOTLOADER_NOT_EXIST,
            S_DA_NAND_NO_GOOD_BLOCK,
            S_DA_NAND_UBIIMG_NOT_SPARSEIMAGE,
            S_DA_BOOTLOADER_IS_TOO_LARGE,
            S_DA_SIBLEY_REWRITE_OBJ_MODE_REGION,
            S_DA_SIBLEY_WRITE_B_HALF_IN_CTRL_MODE_REGION,
            S_DA_SIBLEY_ILLEGAL_CMD,
            S_DA_SIBLEY_PROGRAM_AT_THE_SAME_REGIONS,
            S_DA_UART_GET_DATA_TIMEOUT,
            S_DA_UART_GET_CHKSUM_LSB_TIMEOUT,
            S_DA_UART_GET_CHKSUM_MSB_TIMEOUT,
            S_DA_UART_DATA_CKSUM_ERROR,
            S_DA_UART_RX_BUF_FULL,
            S_DA_UART_RX_BUF_NOT_ENOUGH,
            S_DA_FLASH_RECOVERY_BUF_NOT_ENOUGH,
            S_DA_HANDSET_SEC_INFO_NOT_FOUND,
            S_DA_HANDSET_SEC_INFO_MAC_VERIFY_FAIL,
            S_DA_HANDSET_ROM_INFO_NOT_FOUND,
            S_DA_HANDSET_FAT_INFO_NOT_FOUND,
            S_DA_OPERATION_UNSUPPORT_FOR_NFB,
            S_DA_BYPASS_POST_PROCESS,
            S_DA_NOR_OTP_NOT_SUPPORT,
            S_DA_NOR_OTP_EXIST,
            S_DA_NOR_OTP_LOCKED,
            S_DA_NOR_OTP_GETSIZE_FAIL,
            S_DA_NOR_OTP_READ_FAIL,
            S_DA_NOR_OTP_PROGRAM_FAIL,
            S_DA_NOR_OTP_LOCK_FAIL,
            S_DA_NOR_OTP_LOCK_CHECK_STATUS_FAIL,
            S_DA_BLANK_FLASH,
            S_DA_CODE_AREA_IS_BLANK,
            S_DA_SEC_RO_AREA_IS_BLANK,
            S_DA_NOR_OTP_UNLOCKED,
            S_DA_UNSUPPORTED_BBCHIP,
            S_DA_FAT_NOT_EXIST,
            S_DA_EXT_SRAM_NOT_FOUND,
            S_DA_EXT_DRAM_NOT_FOUND,
            S_DA_MT_PIN_LOW,
            S_DA_MT_PIN_HIGH,
            S_DA_MT_PIN_SHORT,
            S_DA_MT_BUS_ERROR,
            S_DA_MT_ADDR_NOT_2BYTE_ALIGNMENT,
            S_DA_MT_ADDR_NOT_4BYTE_ALIGNMENT,
            S_DA_MT_SIZE_NOT_2BYTE_ALIGNMENT,
            S_DA_MT_SIZE_NOT_4BYTE_ALIGNMENT,
            S_DA_MT_DEDICATED_PATTERN_ERROR,
            S_DA_MT_INC_PATTERN_ERROR,
            S_DA_MT_DEC_PATTERN_ERROR,
            S_DA_NFB_BLOCK_0_IS_BAD,
            S_DA_CUST_PARA_AREA_IS_BLANK,
            S_DA_ENTER_RELAY_MODE_FAIL,
            S_DA_ENTER_RELAY_MODE_IS_FORBIDDEN_AFTER_META,
            S_DA_NAND_PAGE_READ_FAILED,
            S_DA_NAND_IMAGE_BLOCK_NO_EXIST,
            S_DA_NAND_IMAGE_LIST_NOT_EXIST,
            S_DA_MBA_RESOURCE_NO_EXIST_IN_TARGET,
            S_DA_MBA_PROJECT_VERSION_NO_MATCH_WITH_TARGET,
            S_DA_MBA_UPDATING_RESOURCE_NO_EXIST_IN_TARGET,
            S_DA_MBA_UPDATING_RESOURCE_SIZE_EXCEED_IN_TARGET,
            S_DA_NAND_BIN_SIZE_EXCEED_MAX_SIZE,
            S_DA_NAND_EXCEED_CONTAINER_LIMIT,
            S_DA_NAND_REACH_END_OF_FLASH,
            S_DA_NAND_OTP_NOT_SUPPORT,
            S_DA_NAND_OTP_EXIST,
            S_DA_NAND_OTP_LOCKED,
            S_DA_NAND_OTP_LOCK_FAIL,
            S_DA_NAND_OTP_UNLOCKED,
            S_DA_OTP_NOT_SUPPORT,
            S_DA_OTP_EXIST,
            S_DA_OTP_LOCKED,
            S_DA_OTP_GETSIZE_FAIL,
            S_DA_OTP_READ_FAIL,
            S_DA_OTP_PROGRAM_FAIL,
            S_DA_OTP_LOCK_FAIL,
            S_DA_OTP_LOCK_CHECK_STATUS_FAIL,
            S_DA_OTP_UNLOCKED,
            S_DA_SEC_RO_ILLEGAL_MAGIC_TAIL,
            S_DA_HANDSET_FOTA_INFO_NOT_FOUND,
            S_DA_HANDSET_UA_INFO_NOT_FOUND,
            S_DA_SB_FSM_INVALID_INFO,
            S_DA_NFB_TARGET_DUAL_BL_PAIRED_VERSION_NOT_MATCHED_WITH_MAUI,
            S_DA_NFB_TARGET_DUAL_BL_FEATURE_COMBINATION_NOT_MATCHED_WITH_MAUI,
            S_DA_NFB_TARGET_IS_SINGLE_BL_BUT_PC_NOT,
            S_DA_NFB_TARGET_IS_DUAL_BL_BUT_PC_NOT,
            S_DA_NOR_TARGET_BL_PAIRED_VERSION_NOT_MATCHED_WITH_MAUI,
            S_DA_NOR_TARGET_BL_FEATURE_COMBINATION_NOT_MATCHED_WITH_MAUI,
            S_DA_NOR_TARGET_IS_NOT_NEW_BL_BUT_PC_IS,
            S_DA_NOR_TARGET_IS_NEW_BL_BUT_PC_NOT,
            // MT6276 SV5 Bootloader
            S_DA_DOWNLOAD_BOOTLOADER_FLASH_DEV_IS_NONE,
            S_DA_DOWNLOAD_BOOTLOADER_FLASH_DEV_IS_NOT_SUPPORTED,
            S_DA_DOWNLOAD_BOOTLOADER_BEGIN_ADDR_OVERLAPS_WITH_PREVIOUS_BOUNDARY,
            S_DA_UPDATE_BOOTLOADER_EXIST_MAGIC_NOT_MATCHED,
            S_DA_UPDATE_BOOTLOADER_FILE_TYPE_NOT_MATCHED,
            S_DA_UPDATE_BOOTLOADER_FILE_SIZE_EXCEEDS_BOUNDARY_ADDR,
            S_DA_UPDATE_BOOTLOADER_BEGIN_ADDR_NOT_MATCHED,
            S_DA_EMMC_FLASH_NOT_FOUND,
            S_DA_EMMC_FW_VER_CHECK_FAIL,
            S_DA_SDMMC_FLASH_NOT_FOUND,
            S_DA_SDMMC_CONFIG_FAILED,
            S_DA_SDMMC_READ_FAILED,
            S_DA_SDMMC_WRITE_FAILED,
            S_DA_SDMMC_ERR_CRC,
            S_DA_SDMMC_ERR_TIMEOUT,
            S_DA_SDMMC_UNSUPPORTED,
            S_DA_DSPBL_CHECK_PLATFORM_FAILED,
            // UFS
            S_DA_UFS_FLASH_NOT_FOUND,
            S_DA_UFS_CONFIG_FAILED,
            S_DA_UFS_READ_FAILED,
            S_DA_UFS_WRITE_FAILED,
            S_DA_UFS_ERR_TIMEOUT,
            S_DA_UFS_UNSUPPORTED,
            S_DA_UFS_OTP_NOT_SUPPORT,
            S_DA_UFS_OTP_EXIST,
            S_DA_UFS_OTP_LOCKED,
            S_DA_UFS_OTP_LOCK_FAIL,
            S_DA_UFS_OTP_UNLOCKED,
            // SV5 ANDROID { 
            S_DA_HANDSET_SEC_CFG_NOT_FOUND,
            // SV5 ANDROID } 
            // EMMC OTP 
            S_DA_EMMC_OTP_NOT_SUPPORT,
            S_DA_EMMC_OTP_EXIST,
            S_DA_EMMC_OTP_LOCKED,
            S_DA_EMMC_OTP_LOCK_FAIL,
            S_DA_EMMC_OTP_UNLOCKED,
            // EMMC OTP 
            // Read IMEI/PID/SWV 
            S_DA_READ_IMEI_PID_SWV_NOT_SUPPORT,
            // nand empty page flag
            S_DA_NFI_EMPTY_PAGE,
            // Support to check format/download status, 2013/01/19 }
            S_DA_INVALID_STORAGE_TYPE,
            S_DA_SEND_CMD_FAIL,
            S_DA_READ_CMD_ACK_FAIL,
            S_DA_READ_FLASH_STATUS_INFO_FAIL,
            // Support to check format/download status, 2013/01/19 {
            S_PL_VALIDATION_FAIL,
            S_STORAGE_NOT_MATCH,
            S_CHIP_TYPE_NOT_MATCH,
            S_DA_EXCEED_MAX_PARTITION_COUNT,
            S_DA_ERROR_END, // END
            // FlashTool error code (4000~4999) 
            S_FT_ERROR_BEGIN = 4000U,
            S_FT_CALLBACK_DA_REPORT_FAIL = S_FT_ERROR_BEGIN,
            S_FT_DA_NO_RESPONSE,
            S_FT_DA_SYNC_INCORRECT,
            S_FT_DA_VERSION_INCORRECT,
            S_FT_DA_INIT_SYNC_ERROR,
            S_FT_GET_DSP_VER_FAIL,
            S_FT_CHANGE_BAUDRATE_FAIL,
            S_FT_SET_DOWNLOAD_BLOCK_FAIL,
            S_FT_DOWNLOAD_FAIL,
            S_FT_READBACK_FAIL,
            S_FT_FORMAT_FAIL,
            S_FT_FINISH_CMD_FAIL,
            S_FT_ENABLE_WATCHDOG_FAIL,
            S_FT_NFB_DOWNLOAD_BOOTLOADER_FAIL,
            S_FT_NFB_DOWNLOAD_CODE_FAIL,
            S_FT_NFB_INVALID_BOOTLOADER_DRAM_SETTING,
            S_FT_NAND_READADDR_NOT_PAGE_ALIGNMENT,
            S_FT_NAND_READLEN_NOT_PAGE_ALIGNMENT,
            S_FT_READ_REG16_FAIL,
            S_FT_WRITE_REG16_FAIL,
            S_FT_CUST_PARA_GET_INFO_FAIL,
            S_FT_CUST_PARA_READ_FAIL,
            S_FT_CUST_PARA_WRITE_FAIL,
            S_FT_INVALID_FTCFG_OPERATION,
            S_FT_INVALID_CUST_PARA_OPERATION,
            S_FT_INVALID_SEC_RO_OPERATION,
            S_FT_INVALID_OTP_OPERATION,
            S_FT_POST_PROCESS_FAIL,
            S_FT_FTCFG_UPDATE_FAIL,
            S_FT_SEC_RO_GET_INFO_FAIL,
            S_FT_SEC_RO_READ_FAIL,
            S_FT_SEC_RO_WRITE_FAIL,
            S_FT_ENABLE_DRAM_FAIL,
            S_FT_FS_FINDFIRSTEX_FAIL,
            S_FT_FS_FINDNEXTEX_FAIL,
            S_FT_FS_FOPEN_FAIL,
            S_FT_FS_GETFILESIZE_FAIL,
            S_FT_FS_READ_FAIL,
            S_FT_FS_FILENAME_INVALID,
            S_FT_FS_FILENAME_TOO_LONG,
            S_FT_FS_ASSERT,
            S_FT_OTP_ADDR_NOT_WORD_ALIGNMENT,
            S_FT_OTP_LENGTH_NOT_WORD_ALIGNMENT,
            S_FT_OTP_INVALID_ADDRESS_RANGE,
            S_FT_NAND_READ_TO_BUFFER_NOT_SUPPORT,
            S_FT_GET_PROJECT_ID_FAIL,
            S_FT_ENFB_ROM_FILE_SMALL_THAN_HEADER_DESCRIBE,
            S_FT_RW_EXTRACT_NFB_FAIL,
            S_FT_MEMORY_TEST_FAIL,
            S_FT_CHECK_BOOTLOADER_FEATURE_FAIL,
            S_FT_NEED_DOWNLOAD_ALL_FAIL,
            S_FT_NEW_PARTITION_TBL_FAIL,
            S_FT_UPDATE_PARTITION_TBL_FAIL,
            S_FT_PROTOCOL_EXCEPTION,
            S_FT_PROTOCOL_EXCEPTION_WITHOUT_EFUSE_VERIFY,
            S_FT_COMMUNICATION_ERROR_WITHOUT_EFUSE_VERIFY,
            S_FT_GET_MAC_FAIL,
            S_FT_GET_TIME_FAIL,
            S_FT_GET_MEMORY_FAIL,
            S_FT_GET_MODEM_FAIL,
            S_FT_ERROR_END, // END
            // FlashTool Handle error code (5000~5999) 
            S_FTHND_ERROR_BEGIN = 5000U,
            S_AUTH_HANDLE_IS_NOT_READY = S_FTHND_ERROR_BEGIN,
            S_INVALID_AUTH_FILE,
            S_INVALID_DA_FILE,
            S_DA_HANDLE_IS_NOT_READY,
            S_FTHND_ILLEGAL_INDEX,
            S_FTHND_HANDLE_BUSY_NOW,
            S_FTHND_FILE_IS_UPDATED,
            S_FTHND_FILE_IS_NOT_LOADED_YET,
            S_FTHND_FILE_LOAD_FAIL,
            S_FTHND_FILE_UNLOAD_FAIL,
            S_FTHND_LIST_IS_EMPTY,
            S_DL_SCAT_INCORRECT_FORMAT,
            S_DL_SCAT_ADDR_IS_NOT_WORD_ALIGN,
            S_DL_SCAT_OFFSET_IS_NOT_WORD_ALIGN,
            S_DL_SCAT_ADDR_IS_NOT_ASCENDING_ORDER,
            S_DL_SCAT_JUMPTABLE_IS_NOT_ABSOLUTE_ADDR,
            S_DL_LOAD_REGION_IS_OVERLAP,
            S_DL_LOAD_REGION_NOT_FOUND,
            S_DL_NOT_RESOURCE_BIN,
            S_DL_MULTIBIN_MECHANISM_DISABLED,
            S_DL_RESOURCE_NOT_MATCH_IN_JUMPTABLE,
            S_DL_RESOURCE_MUST_DOWNLOAD_WITH_JUMPTABLE,
            S_DL_OVERLAP_WITH_EXISTING_RESOURCE,
            S_DL_INVALID_RESOURCE_BIN,
            S_DL_JUMPTABLE_INCONSISTENT_WITH_SCAT,
            S_DL_INVALID_JUMPTABLE,
            S_DL_IMG_BEGIN_ADDR_NOT_BLOCK_ALIGNMENT,
            S_DL_REGION_ADDR_INCONSISTENT_WITH_SCAT,
            S_DL_REGION_ADDR_INCONSISTENT_WITH_RESOURCE_ADDR,
            S_DL_INVALID_BOOTLOADER,
            S_DL_INVALID_BOOTLOADER_CHKSUM_SEED,
            S_DL_BOOTLOADER_IS_NOT_LOADED_YET,
            S_DL_BOOTLOADER_NOT_FOUND,
            S_DL_REMOTE_FILE_UNSUPPORTED_BY_BL_AUTOLOAD,
            S_DLIST_SAME_BBCHIP_SW_VER,
            S_DLIST_BBCHIP_HW_VER_NOT_MATCHED,
            S_DLIST_NO_MATCHED_DL_HANDLE_FOUND,
            S_DLIST_DL_HANDLE_NOT_IN_LIST,
            S_DLIST_DL_HANDLE_ALREADY_IN_LIST,
            S_FTHND_CALLBACK_REMOTE_GET_FILE_LEN_FAIL,
            S_FTHND_CALLBACK_REMOTE_READ_FILE_FAIL,
            S_FTHND_CALLBACK_FILE_INTEGRITY_CHECK_FAIL,
            S_UNSUPPORTED_VER_OF_AUTH_FILE,
            S_DL_PROJECT_ID_DIFF_BETWEEN_MAIN_CODE_AND_JUMP_TBL,
            S_DL_SCAT_OPEN_FAIL,
            S_FTHND_CALLBACK_COM_INIT_STAGE_FAIL,
            S_DL_UNSECURE_MAUI_TO_SECURE_BB,
            S_FTHND_CALLBACK_REMOTE_GET_SIG_LEN_FAIL,
            S_FTHND_CALLBACK_REMOTE_READ_SIG_FAIL,
            S_DL_RESOURCE_MUST_DOWNLOAD_WITH_ANOTHERBIN,
            S_DL_RESOURCE_MUST_DOWNLOAD_WITH_ENFB,
            S_DL_PROJECT_ID_DIFF_BETWEEN_MAIN_CODE_AND_RESOURCE_BIN,
            S_DL_PROJECT_ID_DIFF_AMONG_RESOURCE_BIN,
            S_DL_UNSECURE_BOOTLOADER_TO_SECURE_BB,
            S_DL_GET_DRAM_SETTING_FAIL,
            S_DL_FOTA_INFO_IMAGE_NUMBER_NOT_MATCH_WITH_SCATTER_FILE,
            S_DL_PROJECT_ID_DIFF_BETWEEN_THIRD_ROM_AND_RESOURCE_BIN,
            S_DL_FOTA_SEC_INFO_MAC_ADDR_NOT_MATCH_WITH_MAUI,
            S_DL_PC_NFB_DUAL_BL_PAIRED_VERSION_NOT_MATCHED_WITH_MAUI,
            S_DL_PC_NFB_DUAL_BL_FEATURE_COMBINATION_NOT_MATCHED_WITH_MAUI,
            S_DL_PC_NOR_XIP_BL_PAIRED_VERSION_NOT_MATCHED_WITH_MAUI,
            S_DL_PC_NOR_XIP_BL_FEATURE_COMBINATION_NOT_MATCHED_WITH_MAUI,
            // SV5 - MT6276
            S_INVALID_SCERT_FILE,
            S_UNSUPPORTED_VER_OF_SCERT_FILE,
            S_DL_PC_BL_FILE_TYPE_IS_DUPLICATED,
            S_DL_PC_BL_FILE_DEV_IS_DIFFERENT,
            S_DL_PC_BL_INVALID_GFH_FILE_INFO,
            S_DL_PC_BL_INVALID_GFH_BL_INFO,
            S_DL_PC_BL_INVALID_GFH_ANTI_CLONE,
            S_DL_PMT_ERR_NO_SPACE,
            S_DL_PC_BL_INVALID_BL_SEC_K,
            S_DL_PC_BL_BL_SEC_K_HASH_FAIL,
            S_DL_WRITE_PT_FAIL,
            S_DL_READ_PT_FAIL,
            S_DL_BL_HASH_FAIL,
            S_DL_BL_HASH_MISMATCH,
            S_DL_BL_SIG_FAIL,
            S_DL_BL_SIG_MISMATCH,
            S_DL_BL_SIG_TYPE_UNSUPPORTED,
            S_DL_SCAT_VERSION_UNSUPPORTED,
            S_DL_SCAT_IS_DOWNLOAD_PROP_ERR,
            S_DL_RSC_FILE_NOT_FOUND,
            S_DL_RSC_MAGIC_ERR,
            S_DL_RSC_FILE_INVALID,
            S_DL_RSC_FILE_ERR,
            S_DL_RSC_INVALID_PARAMETER,
            S_FTHND_ERROR_END, // END
            // security error code (6000~6999) 
            S_SECURITY_ERROR_BEGIN = 6000U,
            S_SECURITY_CALLBACK_SLA_CHALLENGE_FAIL = S_SECURITY_ERROR_BEGIN,
            S_SECURITY_SLA_WRONG_AUTH_FILE,
            S_SECURITY_SLA_INVALID_AUTH_FILE,
            S_SECURITY_SLA_CHALLENGE_FAIL,
            S_SECURITY_SLA_FAIL,
            S_SECURITY_DAA_FAIL,
            S_SECURITY_SBC_FAIL,
            S_SECURITY_SF_SECURE_VER_CHECK_FAIL,
            S_SECURITY_SF_HANDSET_SECURE_CUSTOM_NAME_NOT_MATCH,
            S_SECURITY_SF_FTCFG_LOCKDOWN,
            S_SECURITY_SF_CODE_DOWNLOAD_FORBIDDEN,
            S_SECURITY_SF_CODE_READBACK_FORBIDDEN,
            S_SECURITY_SF_CODE_FORMAT_FORBIDDEN,
            S_SECURITY_SF_SEC_RO_DOWNLOAD_FORBIDDEN,
            S_SECURITY_SF_SEC_RO_READBACK_FORBIDDEN,
            S_SECURITY_SF_SEC_RO_FORMAT_FORBIDDEN,
            S_SECURITY_SF_FAT_DOWNLOAD_FORBIDDEN,
            S_SECURITY_SF_FAT_READBACK_FORBIDDEN,
            S_SECURITY_SF_FAT_FORMAT_FORBIDDEN,
            S_SECURITY_SF_RESTRICTED_AREA_ACCESS_FORBIDDEN,
            S_SECURITY_SECURE_CUSTOM_NAME_NOT_MATCH_BETWEEN_AUTH_AND_DL_HANDLE,
            S_SECURITY_DOWNLOAD_FILE_IS_CORRUPTED,
            S_SECURITY_NOT_SUPPORT,
            S_SECURITY_BOOTLOADER_IMAGE_SIGNATURE_FAIL,
            S_SECURITY_BOOTLOADER_ELDER_SW_VERSION_CANNOT_BE_DOWNLOADED,
            S_SECURITY_BOOTLOADER_IMAGE_NO_SIGNATURE,
            S_SECURITY_BOOTLOADER_CORRUPTED_SCATTER_FILE,
            S_SECURITY_SECURE_USB_DL_NO_MAUI_IN_SCATTER_FILE,
            // SV5 MT6276
            S_SECURITY_SEND_CERT_FAIL,
            S_SECURITY_SEND_AUTH_FAIL,
            S_SECURITY_GET_SEC_CONFIG_FAIL,
            S_SECURITY_GET_ME_ID_FAIL,
            S_BROM_GET_HW_SW_VER_FAIL,
            S_BROM_GET_HW_CODE_FAIL,
            // SV5 ANDROID { 
            S_SECURITY_ROM_INFO_NOT_FOUND,
            S_SECURITY_ROM_INFO_ID_MISMATCH,
            S_SECURITY_SEC_CTRL_ID_MISMATCH,
            S_SECURITY_SEC_KEY_ID_MISMATCH,
            S_SECURITY_SECURE_USB_DL_FAIL,
            S_SECURITY_SECURE_USB_DL_CHECK_TARGET_STATUS_FAIL,
            S_SECURITY_SECURE_USB_DL_SEND_CHIP_STATUS_FAIL,
            S_SECURITY_SECURE_USB_DL_DISABLED,
            S_SECURITY_SECURE_USB_DL_ENABLED,
            S_SECURITY_SECURE_USB_DL_IMAGE_PUBLIC_N_KEY_READ_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_PUBLIC_E_KEY_READ_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_SIGN_HEADER_NOT_FOUND,
            S_SECURITY_SECURE_USB_DL_IMGAE_SIGNATURE_VERIFY_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_HASH_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_NOT_FOUND,
            S_SECURITY_SECURE_USB_DL_INVALID_IMAGE_ARGUMENT,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_INIT_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_WRITE_IMAGE_NAME_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_WRITE_IMAGE_NAME_LEN_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_WRITE_TYPE_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_WRITE_HEADER_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_WRITE_IMAGE_OFFSET_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_WRITE_SIGNATURE_HASH_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_GET_CHECK_RESULT_FAIL,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_DOWNLOAD_IMAGE_INVALID,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_UNKNOWN_CHECK_RESULT,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_WRONG_OPERATION,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_INVALID_HEADER_LENGTH,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_INVALID_IMAGE_OFFSET,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_INVALID_SIGNATURE_LENGTH,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_SIGNATURE_LENGTH_TOO_LARGE,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_IMAGE_NAME_LENGTH_TOO_LONG,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_EXT_HEADER_TOO_LARGE,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_EXT_HEADER_OFFSET_INVALID,
            S_SECURITY_SECURE_USB_DL_IMAGE_INFO_CHECK_CMD_EXT_HEADER_SELF_COPY_FAIL,
            S_SECURITY_SEC_CFG_NOT_EXIST,
            S_SECURITY_SEC_CFG_WRITE_CMD_INIT_FAIL,
            S_SECURITY_SEC_CFG_WRONG_MAGIC_NUMBER,
            S_SECURITY_SEC_CFG_IS_FULL_CANNOT_ADD_NEW_IMAGE,
            S_SECURITY_SEC_CFG_IMAGE_NOT_FOUND_SO_CANNOT_UPDATE,
            S_SECURITY_SEC_CFG_IMAGE_CUST_NAME_MISMATCH,
            S_SECURITY_SEC_CFG_IMAGE_CANNOT_ROLL_BACK_SW_LOAD,
            S_SECURITY_SEC_CFG_IMAGE_EXIST_CANNOT_CREATE_MEW_FILE,
            S_SECURITY_SEC_CFG_WRITE_FAIL_CFG_NOT_EXIST,
            S_SECURITY_SEC_CFG_WRITE_FAIL_MAGIC_INCORRECT,
            S_SECURITY_SEC_CFG_WRITE_FAIL_CANNOT_WRITE_TO_FIRST_BLOCK,
            S_SECURITY_SEC_CFG_WRITE_FAIL_YAFFS2_POST_PROCESS_FAIL,
            S_SECURITY_SEC_CFG_WRITE_FAIL_NAND_DEVICE,
            S_SECURITY_SEC_CFG_WRITE_FAIL_CANNOT_READ_BACK,
            S_SECURITY_SEC_CFG_WRITE_FAIL_READ_BACK_MAGIC_INCORRECT,
            S_SECURITY_SEC_CFG_WRITE_FAIL_READ_BACK_ID_INCORRECT,
            S_SECURITY_SEC_CFG_WRITE_FAIL_READ_BACK_STATUS_INCORRECT,
            S_SECURITY_SEC_CFG_WRITE_FAIL_READ_BACK_END_PATTERN_INCORRECT,
            S_SECURITY_SEC_CFG_WRITE_FAIL_SEC_CFG_CANNOT_OVERWRITE_NEXT_PARTITION,
            S_SECURITY_SEC_CFG_WRITE_FAIL_NAND_NOT_DETECTED,
            S_SECURITY_SEC_CFG_WRITE_FAIL_EMMC_NOT_DETECTED,
            S_SECURITY_SEC_CFG_WRITE_FAIL_EMMC_DEVICE,
            S_SECURITY_SEC_CFG_WRITE_FAIL_NAND_PAGE_SIZE_NOT_SUPPORT,
            S_SECURITY_SEC_CFG_WRITE_FAIL_NAND_FIND_GOOD_BLK_FAIL,
            S_SECURITY_SEC_CFG_WRITE_FAIL_NAND_ERASE_FAIL,
            S_SECURITY_SEC_CFG_WRITE_FAIL_UNKNOWN_DEVIE_TYPE,
            S_SECURITY_SEC_CFG_READ_FAIL_NAND_NOT_DETECTED,
            S_SECURITY_SEC_CFG_READ_FAIL_EMMC_NOT_DETECTED,
            S_SECURITY_SEC_CFG_READ_FAIL_EMMC_DEVICE,
            S_SECURITY_SEC_CFG_READ_FAIL_NAND_PAGE_SIZE_NOT_SUPPORT,
            S_SECURITY_SEC_CFG_READ_FAIL_NAND_FIND_GOOD_BLK_FAIL,
            S_SECURITY_SEC_CFG_READ_FAIL_UNKNOWN_DEVIE_TYPE,
            S_SECURITY_SEC_CFG_READ_FAIL_NAND_LOGICAL_READ_FAIL,
            S_SECURITY_SEC_CFG_EXT_REGION_SPACE_OVERFLOW,
            S_SECURITY_SECURE_USB_DL_ROM_INFO_UPDATE_REQUEST_FAIL,
            S_SECURITY_SECURE_USB_DL_DA_RETURN_INVALID_TYPE,
            S_SECURITY_SECURE_USB_DL_MOVE_IMAGE_HEADER_TO_END_FAIL,
            S_SECURITY_SECURE_USB_DL_NO_NEED_TO_MOVE_IMAGE_HEADER,
            S_SECURITY_SECURE_USB_DL_NO_NEED_TO_REMOVE_IMAGE_HEADER_AND_SIG,
            S_SECURITY_CIPHER_DATA_UNALIGNED,
            S_SECURITY_CIPHER_MODE_INVALID,
            S_SECURITY_CIPHER_KEY_INVALID,
            S_SECURITY_CIPHER_INIT_FAIL,
            S_SECURITY_CIPHER_ROM_NOT_LOADED,
            S_SECURITY_CIPHER_DEC_FAIL,
            S_SECURITY_CIPHER_ENC_TEST_FAIL,
            S_SECURITY_AES_VER_INVALID,
            S_INVALID_IMGDEC_CFG,
            S_SECURITY_IMGDEC_INVALID_FORCE_DEC_PARAM,
            S_SECURITY_IMGDEC_INVALID_AES_KEY_SIZE,
            S_SECURITY_IMGDEC_FAIL_IMAGE_NOT_ENCRYPTED,
            S_SECURITY_IMGDEC_INIT_FAIL_FTH_IS_NULL,
            S_SECURITY_IMGDEC_INIT_FAIL_DECH_IS_NULL,
            S_SECURITY_INIDEC_FAIL_INI_NOT_ENCRYPTED,
            S_SECURITY_INIDEC_INVALID_AES_KEY_SIZE,
            S_SECURITY_INVALID_PROJECT,
            S_SECURITY_SECRO_ANTICLONE_LENGTH_INVALID,
            S_SECURITY_SECRO_HASH_INCORRECT,
            S_SECURITY_SECRO_ENCRYPT_FAIL,
            S_SECURITY_AC_REGION_NOT_FOUND_IN_SECROIMG,
            // SV5 ANDROID } 
            S_SECURITY_ERROR_END, // END
            // common error code (7000 ~ 7999) 
            S_EPP_COMMON_ERROR_BEGIN = 7000U,
            S_EPP_FAIL = S_EPP_COMMON_ERROR_BEGIN,
            S_EPP_EXT_DRAM_NOT_FOUND,
            S_EPP_EXT_DRAM_INIT_FAIL,
            S_EPP_NO_EMI_CONFIG_PARAM_FAIL,
            S_EPP_ERROR_END, // END
            // For Preloader command
            S_PL_MODE_UNSUPPORTED = 10001U,
            S_PL_MODE_FORBIDDEN,
            S_PL_MODE_INVALID_ARGUMETS,
            S_PL_READ_FAIL,
            S_PL_WRITE_FAIL,
            S_PL_READ_TIMEOUT,
            S_PL_WRITE_TIMEOUT,
            S_PL_DISC_CMD_NEEDED,
            // beging of status_ex, for new arch lib & DA, begin from 0xC0010001
            STATUS_ERRField = 0xC0010001U,
            STATUS_ABORT = 0xC0010002U,
            STATUS_UNSUPPORT_CMD = 0xC0010003U,
            STATUS_UNSUPPORT_CTRL_CODE = 0xC0010004U,
            STATUS_PROTOCOL_ERR = 0xC0010005U,
            STATUS_PROTOCOL_BUFFER_OVERFLOW = 0xC0010006U,
            STATUS_INSUFFICIENT_BUFFER = 0xC0010007U,
            STATUS_USB_SCAN_ERR = 0xC0010008U,
            STATUS_INVALID_HSESSION = 0xC0010009U,
            STATUS_INVALID_SESSION = 0xC001000AU,
            STATUS_INVALID_STAGE = 0xC001000BU,
            STATUS_NOT_IMPLEMENTED = 0xC001000CU,
            STATUS_FILE_NOT_FOUND = 0xC001000DU,
            STATUS_OPEN_FILE_ERR = 0xC001000EU,
            STATUS_WRITE_FILE_ERR = 0xC001000FU,
            STATUS_READ_FILE_ERR = 0xC0010010U,
            STATUS_CREATE_FILE_ERR = 0xC0010011U,
            STATUS_UNSUPPORT_VERSION = 0xC0010012U,
            STATUS_MEM_ALLOC_FAIL = 0xC0010013U,
            // Host command 
            STATUS_DEVICE_CTRL_EXCEPTION = 0xC0050001U,
            STATUS_SHUTDOWN_CMD_EXCEPTION = 0xC0050002U,
            STATUS_DOWNLOAD_EXCEPTION = 0xC0050003U,
            STATUS_UPLOAD_EXCEPTION = 0xC0050004U,
            STATUS_EXT_RAM_EXCEPTIONField = 0xC0050005U,
            STATUS_NOTIFY_SWITCH_USB_SPEED_EXCEPTION = 0xC0050006U,
            STATUS_READ_DATA_EXCEPTION = 0xC0050007U,
            STATUS_WRITE_DATA_EXCEPTION = 0xC0050008U,
            STATUS_FORMAT_EXCEPTION = 0xC0050009U,
            STATUS_OTP_OPERATION_EXCEPTION = 0xC005000AU,
            STATUS_SWITCH_USB_EXCEPTION = 0xC005000BU,
            STATUS_WRITE_EFUSE_EXCEPTION = 0xC005000CU,
            STATUS_READ_EFUSE_EXCEPTION = 0xC005000DU,
            // brom
            STATUS_BROM_CMD_STARTCMD_FAIL = 0xC0060001U,
            STATUS_BROM_GET_BBCHIP_HW_VER_FAIL = 0xC0060002U,
            STATUS_BROM_CMD_SEND_DA_FAIL = 0xC0060003U,
            STATUS_BROM_CMD_JUMP_DA_FAIL = 0xC0060004U,
            STATUS_BROM_CMD_FAIL = 0xC0060005U,
            STATUS_CALLBACK_BROM_STAGE_FAIL = 0xC0060006U,
            // brom info
            STATUS_BROM_CONNECT_NOT_PL = 0x40060001U,
            // preloader
            STATUS_PL_CMD_FAIL = 0xC0080001U,
            // da
            STATUS_DA_VERSION_INCORRECT = 0xC0070001U,
            STATUS_DA_NOT_FOUND = 0xC0070002U,
            STATUS_DA_SECTION_NOT_FOUND = 0xC0070003U,
            STATUS_DA_HASH_MISMATCH = 0xC0070004U,
            STATUS_DA_EXCEED_MAX_NUM = 0xC0070005U,
            // Lib
            STATUS_SCATTER_FILE_INVALID = 0xC0030001U,
            STATUS_DA_FILE_INVALID = 0xC0030002U,
            STATUS_DA_SELECTION_ERR = 0xC0030003U,
            STATUS_PRELOADER_INVALID = 0xC0030004U,
            STATUS_EMI_HDR_INVALIDField = 0xC0030005U,
            STATUS_STORAGE_MISMATCH = 0xC0030006U,
            STATUS_INVALID_PARAMETERS = 0xC0030007U,
            STATUS_INVALID_GPT = 0xC0030008U,
            STATUS_INVALID_PMT = 0xC0030009U,
            STATUS_LAYOUT_CHANGED = 0xC003000AU,
            STATUS_INVALID_FORMAT_PARAMETER = 0xC003000BU,
            STATUS_UNKNOWN_STORAGE_SECTION_TYPE = 0xC003000CU,
            STATUS_UNKNOWN_SCATTER_FIELD = 0xC003000DU,
            STATUS_PARTITION_TBL_NOT_EXIST = 0xC003000EU,
            STATUS_SCATTER_HW_CHIP_ID_MISMATCH = 0xC003000FU,
            STATUS_SEC_CERT_FILE_NOT_FOUND = 0xC0030010U,
            STATUS_SEC_AUTH_FILE_NOT_FOUND = 0xC0030011U,
            STATUS_SEC_AUTH_FILE_NEEDED = 0xC0030012U,
            STATUS_EMI_CONTAINER_FILE_NOT_FOUNDField = 0xC0030013U,
            STATUS_SCATTER_FILE_NOT_FOUND = 0xC0030014U,
            STATUS_XML_FILE_OP_ERR = 0xC0030015U,
            STATUS_UNSUPPORTED_PAGE_SIZE = 0xC0030016U,
            STATUS_EMI_INFO_LEN_OFFSET_INVALIDField = 0xC0030017U,
            STATUS_EMI_INFO_LEN_INVALIDField = 0xC0030018U,
            STATUS_UNSUPPORT_STORAGE = 0xC0030019U,
            STATUS_RSC_MAGIC_ERR = 0xC003001AU,
            STATUS_CERT_INVALID = 0xC003001BU,
            STATUS_STOR_LIFE_WARN = 0xC003001CU,
            STATUS_STOR_LIFE_EXHAUST = 0xC003001DU,
            // device info
            STATUS_SPARSE_INCOMPLETE = 0x40040001U,
            STATUS_OTP_LOCKED = 0x40040002U,
            STATUS_OTP_UNLOCKED = 0x40040003U,
            STATUS_CONTINUE = 0x40040004U,
            STATUS_COMPLETE = 0x40040005U,
            STATUS_DRAM_REPAIR_COMPLETE = 0x40040006U,
            // device err
            STATUS_UNSUPPORT_OP = 0xC0040001U,
            STATUS_THREAD = 0xC0040002U,
            STATUS_CHECKSUM_ERR = 0xC0040003U,
            STATUS_TOO_LARGE = 0xC0040004U,
            STATUS_UNKNOWN_SPARSE_CHUNK_TYPE = 0xC0040005U,
            STATUS_PARTITON_NOT_FOUND = 0xC0040006U,
            STATUS_READ_PT_FAIL = 0xC0040007U,
            STATUS_EXCEED_MAX_PART_NUMField = 0xC0040008U,
            STATUS_UNKNOWN_STORAGE_TYPE = 0xC0040009U,
            STATUS_DRAM_TEST_FAILED = 0xC004000AU,
            STATUS_EXCEED_AVALIABLE_RANGEField = 0xC004000BU,
            STATUS_WRITE_SPARSE_IMAGE_FAIL = 0xC004000CU,
            STATUS_REG_PERMISSION_DENIED = 0xC004000DU,
            STATUS_PL_NOT_FOUND = 0xC004000EU,
            // emmc err
            STATUS_MMC_ERR = 0xC0040030U,
            // nand err
            STATUS_NAND_ERR = 0xC0040040U,
            STATUS_NAND_IN_PROGRESS = 0xC0040041U,
            STATUS_NAND_TIMEOUT = 0xC0040042U,
            STATUS_NAND_BAD_BLOCK = 0xC0040043U,
            STATUS_NAND_ERASE_FAILED = 0xC0040044U,
            STATUS_NAND_PAGE_PROGRAM_FAILED = 0xC0040045U,
            STATUS_NAND_FTL_OFFSET_JUMP_NEXT = 0xC0040046U,
            // DRAM init error
            STATUS_EMI_SETTING_VERSION_ERRORField = 0xC0040050U,
            // otp
            STATUS_DA_OTP_NOT_SUPPORT = 0xC0040100U,
            STATUS_DA_OTP_LOCK_FAIL = 0xC0040102U,
            // efuse
            STATUS_EFUSE_UNKNOWN_ERRField = 0xC0040200U,
            STATUS_EFUSE_WRITE_TIMEOUT_WITHOUT_VERIFYField = 0xC0040201U,
            STATUS_EFUSE_BLOWN_DONEField = 0xC0040202U,
            STATUS_EFUSE_REVERT_BITField = 0xC0040203U,
            STATUS_EFUSE_BLOWN_PARTLYField = 0xC0040204U,
            STATUS_EFUSE_INVALID_ARGUMENTField = 0xC0040205U,
            STATUS_EFUSE_VALUE_IS_NOT_ZEROField = 0xC0040206U,
            STATUS_EFUSE_BLOWN_INCORRECT_DATAField = 0xC0040207U,
            STATUS_EFUSE_BROKENField = 0xC0040208U,
            STATUS_EFUSE_BLOW_ERRField = 0xC0040209U,
            STATUS_EFUSE_DATA_PROCESS_ERRField = 0xC004020AU,
            STATUS_EFUSE_UNLOCK_BPKEY_ERRField = 0xC004020BU,
            STATUS_EFUSE_CREATE_LIST_ERRField = 0xC004020CU,
            STATUS_EFUSE_WRITE_REGISTER_ERRField = 0xC004020DU,
            STATUS_EFUSE_PADDING_TYPE_MISMATCHField = 0xC004020EU,
            STATUS_EFUSE_CON_LOCKEDField = 0xC004020FU,
            STATUS_EFUSE_RSA_ERRORField = 0xC0040210U,
            // emmc otp
            STATUS_DA_EMMC_OTP_NOT_SUPPORT = STATUS_DA_OTP_NOT_SUPPORT,
            STATUS_DA_EMMC_OTP_LOCKED = STATUS_OTP_LOCKED,
            STATUS_DA_EMMC_OTP_LOCK_FAIL = STATUS_DA_OTP_LOCK_FAIL,
            STATUS_DA_EMMC_OTP_UNLOCKED = STATUS_OTP_UNLOCKED,
            // Note: need modify nand driver with error code "S_..."
            STATUS_DA_NAND_OTP_NOT_SUPPORT = STATUS_DA_OTP_NOT_SUPPORT,
            STATUS_DA_NAND_OTP_LOCKED = STATUS_OTP_LOCKED,
            STATUS_DA_NAND_OTP_LOCK_FAIL = STATUS_DA_OTP_LOCK_FAIL,
            STATUS_DA_NAND_OTP_UNLOCKED = STATUS_OTP_UNLOCKED,
            // security 
            STATUS_SEC_ROM_INFO_NOT_FOUND = 0xC0020001U,
            STATUS_SEC_CUST_NAME_NOT_FOUND = 0xC0020002U,
            STATUS_SEC_ROM_INFO_DEVICE_NOT_SUPPORTED = 0xC0020003U,
            STATUS_SEC_DL_FORBIDDEN = 0xC0020004U,
            STATUS_SEC_IMG_TOO_LARGE = 0xC0020005U,
            STATUS_SEC_PL_VFY_FAIL = 0xC0020006U,
            STATUS_SEC_IMG_VFY_FAIL = 0xC0020007U,
            STATUS_SEC_HASH_OP_FAIL = 0xC0020008U,
            STATUS_SEC_HASH_BINDING_CHK_FAIL = 0xC0020009U,
            STATUS_SEC_INVALID_BUF = 0xC002000AU,
            STATUS_SEC_BINDING_HASH_NOT_AVAIL = 0xC002000BU,
            STATUS_SEC_WRITE_DATA_NOT_ALLOWED = 0xC002000CU,
            STATUS_SEC_FORMAT_NOT_ALLOWED = 0xC002000DU,
            STATUS_SEC_SV5_PUBK_AUTH_FAIL = 0xC002000EU,
            STATUS_SEC_SV5_HASH_VFY_FAIL = 0xC002000FU,
            STATUS_SEC_SV5_RSA_OP_FAIL = 0xC0020010U,
            STATUS_SEC_SV5_RSA_VFY_FAIL = 0xC0020011U,
            STATUS_SEC_SV5_GFH_NOT_FOUND = 0xC0020012U,
            STATUS_SEC_NOT_VALID_CERT1 = 0xC0020013U,
            STATUS_SEC_NOT_VALID_CERT2 = 0xC0020014U,
            STATUS_SEC_NOT_VALID_IMGHDR = 0xC0020015U,
            STATUS_SEC_SIG_SZ_NOT_VALID = 0xC0020016U,
            STATUS_SEC_PSS_OP_FAIL = 0xC0020017U,
            STATUS_SEC_CERT_AUTH_FAIL = 0xC0020018U,
            STATUS_SEC_PUBK_AUTH_MISMATCH_N_SIZE = 0xC0020019U,
            STATUS_SEC_PUBK_AUTH_MISMATCH_E_SIZE = 0xC002001AU,
            STATUS_SEC_PUBK_AUTH_MISMATCH_N = 0xC002001BU,
            STATUS_SEC_PUBK_AUTH_MISMATCH_E = 0xC002001CU,
            STATUS_SEC_PUBK_AUTH_MISMATCH_HASH = 0xC002001DU,
            STATUS_SEC_CERT_OBJ_NOT_FOUND = 0xC002001EU,
            STATUS_SEC_CERT_OID_NOT_FOUND = 0xC002001FU,
            STATUS_SEC_CERT_OUT_OF_RANGE = 0xC0020020U,
            STATUS_SEC_OID_NOT_MATCH = 0xC0020021U,
            STATUS_SEC_LEN_NOT_MATCH = 0xC0020022U,
            STATUS_SEC_ASN1_UNKNOWN_OP = 0xC0020023U,
            STATUS_SEC_OID_IDX_OUT_OF_RANGE = 0xC0020024U,
            STATUS_SEC_OID_TOO_LARGE = 0xC0020025U,
            STATUS_SEC_PUBK_SZ_MISMATCH = 0xC0020026U,
            STATUS_SEC_SWID_MISMATCH = 0xC0020027U,
            STATUS_SEC_HASH_SZ_MISMATCH = 0xC0020028U,
            STATUS_SEC_IMGHDR_TYPE_MISMATCH = 0xC0020029U,
            STATUS_SEC_IMG_TYPE_MISMATCH = 0xC002002AU,
            STATUS_SEC_IMGHDR_HASH_VFY_FAIL = 0xC002002BU,
            STATUS_SEC_IMG_HASH_VFY_FAIL = 0xC002002CU,
            STATUS_SEC_VIOLATE_ANTI_ROLLBACK = 0xC002002DU,
            STATUS_SEC_SECCFG_NOT_FOUND = 0xC002002EU,
            STATUS_SEC_SECCFG_MAGIC_INCORRECT = 0xC002002FU,
            STATUS_SEC_SECCFG_NOT_VALID = 0xC0020030U,
            STATUS_SEC_CIPHER_MODE_INVALID = 0xC0020031U,
            STATUS_SEC_CIPHER_KEY_INVALID = 0xC0020032U,
            STATUS_SEC_CIPHER_DATA_UNALIGNED = 0xC0020033U,
            STATUS_SEC_GFH_FILE_INFO_NOT_FOUND = 0xC0020034U,
            STATUS_SEC_GFH_ANTI_CLONE_NOT_FOUND = 0xC0020035U,
            STATUS_SEC_GFH_SEC_CFG_NOT_FOUND = 0xC0020036U,
            STATUS_SEC_UNSUPPORTED_SOURCE_TYPE = 0xC0020037U,
            STATUS_SEC_CUST_NAME_MISMATCH = 0xC0020038U,
            STATUS_SEC_INVALID_ADDRESS = 0xC0020039U,
            STATUS_SEC_CERT_VER_NOT_SYNC = 0xC0020040U,
            STATUS_SEC_SIG_NOT_SYNC = 0xC0020041U,
            STATUS_SEC_EXT_ALL_IN_ONE_SIG_REJECT = 0xC0020042U,
            STATUS_SEC_EXT_ALL_IN_ONE_SIG_NOT_EXIST = 0xC0020043U,
            STATUS_SEC_COMM_KEY_IS_NOT_SET = 0xC0020044U,
            STATUS_SEC_COMM_DEVINFO_CHK_FAIL = 0xC0020045U,
            STATUS_SEC_BOOTIMG_COUNT_OVERFLOW = 0xC0020046U,
            STATUS_SEC_SIG_NOT_FOUND = 0xC0020047U,
            STATUS_SEC_BOOTIMG_SPECIAL_HANDLE = 0xC0020048U,
            STATUS_SEC_REMOTE_SECURITY_POLICY_DISABLED = 0xC0020049U,
            STATUS_SEC_RSA_OAEP_FAIL = 0xC002004AU,
            STATUS_SEC_INSUFFICIENT_BUFFER = 0xC002004BU,
            STATUS_SEC_IMG_VER_NOT_SYNC = 0xC002004CU,
            STATUS_SEC_GET_OTP_VALUE_FAIL = 0xC002004DU,
            STATUS_SEC_INVALID_UNIT_SZ = 0xC002004EU,
            STATUS_SEC_INVALID_GROUP_IDX = 0xC002004FU,
            STATUS_SEC_IMG_VER_OVERFLOW = 0xC0020050U,
            STATUS_SEC_OTP_TABLE_NOT_INIT = 0xC0020051U,
            STATUS_SEC_INVALID_PART_NAME = 0xC0020052U,
            STATUS_SEC_INVALID_DA_VER = 0xC0020053U,
            // end of status_ex
            // expand to 32bits width 
            S_MAX_STATUS_WIDTH = 0x7FFFFFFFU
        }

        public enum BBCHIP_TYPE
        {
            MT6205 = 0,
            MT6205B = 1,
            MT6218 = 2,
            MT6218B = 4,
            MT6219 = 5,
            MT6217 = 6,
            MT6228 = 7,
            MT6227 = 8,
            MT6229 = 9,
            MT6226 = 10,
            MT6226M = 11,
            MT6230 = 12,
            MT6225 = 13,
            MT6268T = 14,
            MT6223 = 15,
            MT6227D = 16,
            MT6226D = 17,
            MT6223P = 18,
            MT6238 = 19,
            MT6235 = 20,
            MT6235B = 21,
            TK6516_MD = 22,
            TK6516_AP = 23,
            MT6268A = 24,
            MT6516_MD = 25,
            MT6516_AP = 26,
            MT6239 = 27,
            MT6251T = 28,
            MT6253T = 29,
            MT6268B = 30,
            MT6253 = 32,
            MT6253D = 33,
            MT6236 = 34,
            MT6270A = 35,
            MT6276 = 128,
            MT6251 = 129,
            MT6255 = 130,
            MT6573 = 131,
            MT6575 = 132,
            MT6577 = 133,
            MT6589 = 134,
            MT6582 = 135,
            MT6572 = 136,
            MT8135 = 137,
            MT6592 = 138,
            MT6571 = 139,
            MT6595 = 140,
            MT8127 = 141,
            MT8173 = 142,
            MT6752 = 143,
            MT2601 = 144,
            MT8590 = 145,
            MT7623 = 146,
            MT7683 = 147,
            MT8591 = 148,
            MT8592 = 149,
            MT8531 = 150,
            MT7863 = 151,
            MT2701 = 152,
            MT8521 = 153,
            MT6795 = 154,
            MT6574 = MT6582,
            MT6735 = 155,
            MT6580 = 156,
            MT6735M = 157,
            MT6753 = 158,
            MT6737T = 159,
            MT6737M = 160,
            MT8163 = 161,
            // follow is new arch chip, if add old arch chip, please add after MT8163 and before MT6755 !!!
            MT6755 = 180,
            MT6797 = 181,
            MT6799 = 182, // Whitney
            MT0571 = 183,
            MT6750 = 184,
            ELBRUS = 185, // MT0598
            MT6757 = 186, // kibo, olympus
            MT6757D = 187, // kibo+
            MT6759 = 188, // Alaska
            MT8167 = 189,
            MT6570 = 190, // rushmore
            MT6763 = 191, // Bianco
            MT6758 = 192, // vinson
            MT6739 = 193, // zion
            MT8695 = 194,
            MT6775 = 195, // Cannon
            MT6765 = 196, // cervino
            MT6771 = 197, // Sylvia
            MT8518 = 198, // Weber
            MT3967 = 199, // Eiger
            MT6761 = 200, // Merlot
            MT6779 = 201, // Lafite
            MT8168 = 202, // Aquila
            MT6768 = 203, // Talbot
            MT6731 = 204,
            MT6785 = 205, // Krug
            MT6885 = 206, // Petrus
            MT8512 = 207,
            MT6873 = 208, // Margaux
            MT0992 = 209, // Colgin
            MT6853 = 210, // Mouton
            MT6893 = 211, // Petrus_P
            MT6833 = 212, // Palmer
            MT8696 = 213,
            MT8195 = 214,
            MT6877 = 215, // Montrose
            BBCHIP_TYPE_ENDField,
            AUTO_DETECT_BBCHIP = 254,
            UNKNOWN_BBCHIP_TYPE = 255
        }

        public enum REGION_ADDR_TYPE
        {
            ABSOLUTE_ADDR,
            OFFSET_VALUE
        }

        public enum HW_RAMType_E
        {
            HW_RAM_UNKNOWN,
            HW_RAM_SRAM,
            HW_RAM_DRAM,
            HW_RAM_TYPE_END
        }

        public enum HW_ChipSelect_E
        {
            CS_0 = 0,
            CS_1 = 1,
            CS_2 = 2,
            CS_3 = 3,
            CS_4 = 4,
            CS_5 = 5,
            CS_6 = 6,
            CS_7 = 7,
            CS_WITH_DECODER = 8,
            MAX_CS = 8,
            HW_CHIP_SELECT_END = 9
        }

        public enum ChecksumLevel
        {
            NONE = 0,
            USB = 1,
            STORAG = 2,
            USB_STORAGE = 3
        }

        public enum ROM_TYPE
        {
            NORMAL_ROM = 0x1, // kghost:SV5 it is
            // 
            // RESOURCE_BIN    = 0x02,
            // JUMPTABLE_BIN   = 0x03,
            // ENFB_BIN        = 0x04,
            // UA_BIN          = 0x05,
            // BL_BIN          = 0x06,
            // 
            // kghost ---------------------------
            SV5_BL_BIN = 0x7,
            // ---------------------------------
            // Koshi, 2011.03.21,  { 
            YAFFS_IMG = 0x8,
            // Koshi, 2011.03.21,  } 
            MBR_BIN = 0x9,
            // Add UBIFS image support, 2012/12/18 {
            UBI_IMG = 0x10,
            // Add UBIFS image support, 2012/12/18 }
            // Add EXT4 image support for eMMC, 2013/05/13 {
            EXT4_IMG = 0x11,
            // Add EXT4 image support for eMMC, 2013/05/13 }
            // SD Card on EMMC {
            FAT_IMG = 0x12,
            // SD Card on EMMC }
            // Add F2FS image {
            F2FS_IMG = 0x13,
            // Add F2FS image {
            // Add FTL2.0 image, 2017/01/12
            FTL20_IMG = 0x20,
            // Add FTL2.0 image 
            UNKNOWN_BIN = 0xFF
        }

        public struct RomMemChecksumResult
        {
        }

        public struct SCATTER_Head_Info
        {
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
            public char[] name;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
            public char[] version;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
            public char[] platform;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 128)]
            public char[] project;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
            public char[] storage;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
            public char[] bootChannel;
            public uint blockSize;
            public bool modem_check;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
            public char[] modem;
            public bool skip_pmt_operate;
            public bool resize_check;
        }

        public partial struct DRAM_SETTING
        {
            public bool m_valid; // _TRUE -> dram setting is valid
            public uint m_emi_gen_a;
            public uint m_emi_gen_b;
            public uint m_emi_gen_c;
            public uint m_emi_gen_d;
            public uint m_emi_con_i;
            public uint m_emi_con_i_ext;
            public uint m_emi_con_j;
            public uint m_emi_con_k;
            public uint m_emi_con_l;
            public uint m_emi_con_m;
            public uint m_emi_con_n;
            public uint m_emi_del_a;
            public uint m_emi_del_b;
            public uint m_emi_del_c;
            public uint m_emi_del_d;
            public uint m_emi_del_e;
            public uint m_emi_del_f;
            public uint m_emi_del_g;
            public uint m_emi_del_h;
            public uint m_emi_del_i;
            public uint m_emi_del_j;
            public uint m_emi_arb_a;
            public uint m_emi_arb_b;
            public uint m_emi_arb_c;
            public uint m_emi_arb_d;
            public uint m_emi_arb_e;
            public uint m_emi_arb_f;
            public uint m_emi_arb_g;
            public uint m_emi_arb_h;
            public uint m_emi_arb_i;
            public uint m_emi_drv_a;
            public uint m_emi_drv_b;
            public uint m_emi_iocl;
            public uint m_emi_drct;
            public uint m_emi_ppct;
            public uint m_emi_slct;
            public uint m_emi_abct;
            public uint m_emi_dutb;
            // used in chips for SV5
            public uint m_ver;
            // EMI_SETTINGS_v05 m_emi05;
            public EMI_SETTINGS_v06 m_emi06;
            public EMI_SETTINGS_v07 m_emi07;
        // Public m_emi08 As EMI_SETTINGS_v08
        // Public m_emi09 As EMI_SETTINGS_v09
        // Public m_emi10 As EMI_SETTINGS_v10
        // Public m_emi1001 As EMI_SETTINGS_v1001
        // Public m_emi11 As EMI_SETTINGS_v11
        // Public m_emi12 As EMI_SETTINGS_v12
        // Public m_emi13 As EMI_SETTINGS_v13
        // Public m_emi15 As EMI_SETTINGS_v15
        // C++ TO VB CONVERTER TODO TASK: Unions are not supported in VB:
        // union
        // {
        // 'EMI_SETTINGS_v05 m_emi05;
        // EMI_SETTINGS_v06 m_emi06;
        // EMI_SETTINGS_v07 m_emi07;
        // EMI_SETTINGS_v08 m_emi08;
        // EMI_SETTINGS_v09 m_emi09;
        // EMI_SETTINGS_v10 m_emi10;
        // EMI_SETTINGS_v1001 m_emi1001;
        // EMI_SETTINGS_v11 m_emi11;
        // EMI_SETTINGS_v12 m_emi12;
        // EMI_SETTINGS_v13 m_emi13;
        // EMI_SETTINGS_v15 m_emi15;
        // }
        // }
        }

        // data structure used only by MT6573 combo mcp 
        public struct EMI_SETTINGS_v06
        {
            public uint m_nand_id;
            public uint m_emi_coni;
            public uint m_emi_drva;
            public uint m_emi_drvb;
            public uint m_emi_conj;
            public uint m_emi_conk;
            public uint m_emi_conl;
            public uint m_emi_iocl;
            public uint m_emi_gena;
            public uint m_emi_gend;
            public uint m_emi_drct;
            public uint m_emi_ppct;
            public uint m_emi_slct;
            public uint m_emi_abct;
            public uint m_emi_dutb;
        }

        public enum EXT_CLOCK
        {
            EXT_13M = 1,
            EXT_26M = 2,
            EXT_39M = 3,
            EXT_52M = 4,
            EXT_CLOCK_ENDField,
            AUTO_DETECT_EXT_CLOCK = 254,
            UNKNOWN_EXT_CLOCK = 255
        }

        // data structure used only by MT6573 combo mcp 
        public struct EMI_SETTINGS_v07
        {
            public uint m_nand_id;
            public uint m_emi_coni;
            public uint m_emi_drva;
            public uint m_emi_drvb;
            public uint m_emi_conj;
            public uint m_emi_conk;
            public uint m_emi_conl;
            public uint m_emi_iocl;
            public uint m_emi_gena;
            public uint m_emi_gend;
            public uint m_emi_drct;
            public uint m_emi_ppct;
            public uint m_emi_slct;
            public uint m_emi_abct;
            public uint m_emi_dutb;
            public uint m_emi_conn;
        }

        public delegate int CALLBACK_ROM_MEM_CHECKSUM_PROGRESS_INIT(IntPtr usr_arg, string image_name);
        public delegate int CALLBACK_ROM_MEM_CHECKSUM_PROGRESS(byte finished_percentage, ulong finished_bytes, ulong total_bytes, IntPtr usr_arg);
        public struct RomMemChecksumArg
        {
            public ushort index;
            public uint chksum;
            public CALLBACK_ROM_MEM_CHECKSUM_PROGRESS_INIT m_cb_rom_mem_checksum_init;
            public IntPtr m_cb_rom_mem_checksum_init_arg;
            public CALLBACK_ROM_MEM_CHECKSUM_PROGRESS m_cb_rom_mem_checksum;
            public IntPtr m_cb_rom_mem_checksum_arg;
            public IntPtr p_stopflag;
        }

        public struct DA_REPORT_T
        {
            /// <summary>
            /// DA version
            /// </summary>
            public byte m_expected_da_major_ver;
            public byte m_expected_da_minor_ver;
            public byte m_da_major_ver;
            public byte m_da_minor_ver;
            /// <summary>
            /// bbchip
            /// </summary>
            public BBCHIP_TYPE m_bbchip_type;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
            public string m_bbchip_name;
            public ushort m_bbchip_hw_ver;
            public ushort m_bbchip_sw_ver;
            public ushort m_bbchip_hw_code;
            public EXT_CLOCK m_ext_clock;
            public byte m_bbchip_secure_ver;
            public byte m_bbchip_bl_ver;
            /// <summary>
            /// NOR flash report
            /// </summary>
            public STATUS_E m_nor_ret;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
            public HW_ChipSelect_E[] m_nor_chip_select;
            public ushort m_nor_flash_id;
            public uint m_nor_flash_size;
            public ushort m_nor_flash_dev_code_1;
            public ushort m_nor_flash_dev_code_2;
            public ushort m_nor_flash_dev_code_3;
            public ushort m_nor_flash_dev_code_4;
            public STATUS_E m_nor_flash_otp_status;
            public uint m_nor_flash_otp_size;
            /// <summary>
            /// NAND flash report
            /// </summary>
            public STATUS_E m_nand_ret;
            public HW_ChipSelect_E m_nand_chip_select;
            public ushort m_nand_flash_id;
            public ulong m_nand_flash_size;
            public ushort m_nand_id_count;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
            public ushort[] m_nand_flash_dev_code;
            public ushort m_nand_pagesize;
            public ushort m_nand_sparesize;
            public ushort m_nand_pages_per_block;
            public byte m_nand_io_interface;
            public byte m_nand_addr_cycle;
            public byte m_nand_bmt_exist;
            /// <summary>
            /// internal sram report
            /// </summary>
            public STATUS_E m_int_sram_ret;
            public uint m_int_sram_size;
            /// <summary>
            /// external ram report
            /// </summary>
            public STATUS_E m_ext_ram_ret;
            public HW_RAMType_E m_ext_ram_type;
            public HW_ChipSelect_E m_ext_ram_chip_select;
            public ulong m_ext_ram_size;
            /// <summary>
            /// MTK Security Platform error code
            /// </summary>
            public byte m_msp_err_code;
            /// <summary>
            /// CODE area and SEC_RO area download status
            /// </summary>
            public STATUS_E m_download_status;
            /// <summary>
            /// target boot-up style
            /// </summary>
            public STATUS_E m_boot_style;
            /// <summary>
            /// target fw version
            /// </summary>
            public uint m_fw_ver_len;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
            public string m_fw_ver;
            /// <summary>
            /// target random id
            /// </summary>
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 16)]
            public string m_random_id;
            /// <summary>
            /// current selected DL_HANDLE
            /// </summary>
            private IntPtr m_dl_handle;
            /// <summary>
            /// EMMC flash report
            /// </summary>
            public STATUS_E m_emmc_ret;
            public ulong m_emmc_boot1_size;
            public ulong m_emmc_boot2_size;
            public ulong m_emmc_rpmb_size;
            public ulong m_emmc_gp1_size;
            public ulong m_emmc_gp2_size;
            public ulong m_emmc_gp3_size;
            public ulong m_emmc_gp4_size;
            public ulong m_emmc_ua_size;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
            public uint[] m_emmc_cid;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8)]
            public string m_emmc_fwver;
            /// <summary>
            /// SDMMC flash report
            /// </summary>
            public STATUS_E m_sdmmc_ret;
            public ulong m_sdmmc_ua_size;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
            public uint[] m_sdmmc_cid;
            /// <summary>
            /// UFS flash report
            /// </summary>
            public STATUS_E m_ufs_ret;
            public ulong m_ufs_lu0_size;
            public ulong m_ufs_lu1_size;
            public ulong m_ufs_lu2_size;
            public ushort m_ufs_vendor_id;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 17)]
            public string m_ufs_cid;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)]
            public string m_ufs_fwver;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
            public string m_ufs_sn;
        }

        public enum Partition_Operation_E
        {
            OPER_BOOTLOADERS,
            OPER_UPDATE,
            OPER_INVISIBLE,
            OPER_PROTECTED,
            OPER_RESERVED,
            OPER_BINREGION,
            OPER_UNKNOWN,
            OPER_END
        }

        public struct ROM_INFO
        {
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
            public string name;
            public ulong region_addr;
            /// <summary>
            /// ABSOLUTE_ADDR -> region_addr is absolute address
            /// OFFSET_VALUE  -> region_addr is offset value
            /// </summary>
            public REGION_ADDR_TYPE addr_type;
            public ulong begin_addr;
            public ulong end_addr;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
            public string filepath;
            public ulong filesize;
            public ushort index;
            public ROM_TYPE rom_type;
            /// <summary>
            /// Indicate whether rom to be written to target
            /// _FALSE -> disbale
            /// </summary>
            public bool enable;
            /// <summary>
            /// Koshi, enable the item list in flashtool listview 
            /// is_download in scatter file
            /// </summary>
            public bool item_is_visable;
            /// <summary>
            /// Is ROM partition reserved for MTK
            /// </summary>
            public bool is_reserved;
            /// <summary>
            /// Operation type for ROM partition
            /// </summary>
            public Partition_Operation_E operation_type;
            public uint part_id;
            public ulong partition_size;
            /// <summary>
            /// for two partition share flash size, such as userdata + mrdump
            /// allow userdata size change when download only /firmwareupgrade
            /// </summary>
            public bool combo_partsize_check;
        }

        public partial struct DL_PlatformInfo
        {
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 16)]
            public string m_szBBChipType;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 16)]
            public string m_szStorageType;
            /// <summary>
            /// Add for providing platform configuration info after DL_LoadScatter, 2012/12/22 
            /// </summary>
            public BBCHIP_TYPE m_bbchip_type;
            public HW_StorageType_E m_storage_type;
        }

        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_Create(ref IntPtr p_dl_handle)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_Rom_UnloadAll(IntPtr p_dl_handle)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_Destroy(ref IntPtr p_dl_handle)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_LoadScatter(IntPtr p_dl_handle, byte[] scatter_file, byte[] chip_name)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_BL_Load(IntPtr p_dl_handle, ref byte[] bl_filepath)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_BL_EXT_Load(IntPtr p_dl_handle, ref byte[] bl_ext_filepath)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_AutoLoadRomImages(IntPtr p_dl_handle, byte[] scatter_file)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_Rom_SetEnableAttr(IntPtr dl_handle, ushort index, bool attr)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_SetChecksumLevel(IntPtr dl_handle, ChecksumLevel level)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_VerifyROMMemBuf(IntPtr p_dl_handle, ref RomMemChecksumArg p_rom_mem_check_arg, ref RomMemChecksumResult p_rom_mem_check_result)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_CreateList(ref IntPtr dl_handle_list)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_DestroyList(ref IntPtr dl_handle_list)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_AddHandleToList(IntPtr dl_handle_list, IntPtr p_dl_handle)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        public static extern int DL_GetScatterVersion(IntPtr dl_handle, ref string version)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        public static extern int DL_GetScatterInfo(IntPtr dl_handle, ref SCATTER_Head_Info p_scatter_info)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int FlashTool_GetDLHandle(IntPtr ft_handle, ref IntPtr dl_handle)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_Rom_Load(IntPtr dl_handle, ushort index, byte[] rom_filepath)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern int DL_Rom_Unload(IntPtr dl_handle, ushort index)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        [DllImport("FlashToolLib.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern IntPtr DL_GetDRAMSetting(IntPtr dl_handle, ref DRAM_SETTING dram_cfg, ref DA_REPORT_T da_report)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
        public static IntPtr dl_handle = default /* To get full source code, contact us at https://alephgsm.com/contact-us/ */;
        public static IntPtr dl_handle_list = default /* To get full source code, contact us at https://alephgsm.com/contact-us/ */;
        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static bool LoadRomFile(ushort Index, string fpath)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static bool JustLoadRomFile(ushort Index, string fpath)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        public static bool BLLoad(string fpath)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static bool EnableAttr(ushort Index, bool Enable)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static void DLTest()
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        private static IntPtr FlashToolLibv1Ptr = default /* To get full source code, contact us at https://alephgsm.com/contact-us/ */;
        private static IntPtr FlashtoollibExPtr = default /* To get full source code, contact us at https://alephgsm.com/contact-us/ */;
        private static IntPtr SLA_ChallengePtr = default /* To get full source code, contact us at https://alephgsm.com/contact-us/ */;
        private static IntPtr FlashToolLibPtr = default /* To get full source code, contact us at https://alephgsm.com/contact-us/ */;
        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static void DLHandle()
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        public static void UnloadAll()
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static void DLHandleDestroy()
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static bool SetChecksumLevel(ChecksumLevel Level)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static void DLLoadScatter(int idx, string scat_file)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static void DLAutoLoadRomImages(int idx, string scat_file)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static DL_PlatformInfo DLGetPlatfromInfo(int idx)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static SCATTER_Head_Info SCATTERHeadInfo()
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static List<ROM_INFO> GetAllRomInfo(int idx)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static void DLHandleList()
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static void DLHandleListDestroy()
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }

        [HandleProcessCorruptedStateExceptions()]
        [SecurityCritical()]
        public static void DLAddHandleToList(int idx)
        {
            throw new NotImplementedException("To get full source code, contact us at https://alephgsm.com/contact-us/");
        }
    }
}